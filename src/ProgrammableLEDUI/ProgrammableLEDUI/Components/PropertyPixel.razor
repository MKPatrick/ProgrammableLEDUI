<h3>Pixel Property of @Pixel?.PixelIndex</h3>
@using BlazorColorPicker


<button class="btn btn-danger" @onclick="RemovePixel">
    <div class="buttonColor"></div>🗑️ Remove Pixel
</button>

<button class="btn btn-primary" @onclick="OpenModal">
    <div style="background-color:@color" class="buttonColor"></div> Pixel Color
</button>
<br/>
<ColorPicker Title="My Blazor ColorPicker" IsOpened="isOpened" Closed="ClosedEvent" MyColor="@color">
</ColorPicker>

<input @bind-value="ColorInput" type="text" />



@code {

    private LEDPixelModel pixel { get; set; }
    private string colorInput { get; set; }


    [Parameter]
    public LEDPixelModel Pixel
    {
        get { return pixel; }
        set { pixel = value;
            StateHasChanged();
            if(value!=null)
            {
                colorInput = value.PixelColor.ToArgbHex();
                color = colorInput;
            }
        }
    }


    [Parameter]
    public EventCallback<LEDPixelModel> PixelRemoved { get; set; }



    [Parameter]
    public EventCallback<string> PropertyChanged { get; set; }

    bool isOpened = false;
    string color = "#F1F7E9";

    public string ColorInput
    {
        get
        {
            return colorInput;
        }
        set
        {
            colorInput = value;
            ClosedEvent(value);
        }
    }



    async Task RemovePixel()
    {
        await PixelRemoved.InvokeAsync(Pixel);
    }

    void OpenModal()
    {
        isOpened = true;
    }

    void ClosedEvent(string value)
    {
        color = value;
        colorInput = value;
        isOpened = false;
        Pixel.PixelColor = Color.FromArgb(value);
        PropertyChanged.InvokeAsync("Color");
        StateHasChanged();
    }
}


