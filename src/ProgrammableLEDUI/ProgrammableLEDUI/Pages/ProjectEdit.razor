@page "/ProjectEdit/{identifier}"
@inject ProgrammableLEDUI.Services.IProjectService projectService;



<div class="pixelUI">
    <ProgrammableLEDUI.Components.PixelUI  PixelGetClicked="PixelClicked" Project="project" CurrentScene="currentScene" />
</div>
<div class="sceneOverview">
    <ProgrammableLEDUI.Components.SceneOverview SceneSelectionChanged="CurrentSceneChanged" Project="project" NewSceneAdded="NewSceneAdded" />
</div>
<div class="propertyPixels">
    <div class="propertyScene">
        <ProgrammableLEDUI.Components.PropertyScene Scene="currentScene" />
    </div>
    <div class="propertyScene">
        <ProgrammableLEDUI.Components.PropertyPixel PixelRemoved="PixelRemoved" PropertyChanged="PropertyChanged" Pixel="currentPixel" />
    </div>
    <div class="propertyScene">
        <ProgrammableLEDUI.Components.TranspileScene Scene="currentScene" />
    </div>
</div>



@code {
    [Parameter]
    public string identifier { get; set; }

    private ProjectModel project;
    private SceneModel currentScene;
    private LEDPixelModel currentPixel;
    protected override async Task OnInitializedAsync()
    {
        project = projectService.GetProjectByID(identifier);
        if (project.Scenes.Count() > 0)
            currentScene = project.Scenes[0];
    }


    async Task NewSceneAdded(SceneModel newScene)
    {
        newScene.Project = project;
        projectService.SaveProject(project);
    }


    async Task PixelRemoved(LEDPixelModel pixel)
    {
        currentScene.NewPixels.Remove(pixel);
        currentPixel = null;
    }

    async Task CurrentSceneChanged(SceneModel scene)
    {
        currentScene = scene;
    }


    async Task PixelClicked(LEDPixelModel pixel)
    {
        if (currentScene.NewPixels.FirstOrDefault(x => x.PixelIndex == pixel.PixelIndex) == null)
        {
            currentScene.NewPixels.Add(pixel);
        }
        currentPixel = pixel;
    }


    async Task PropertyChanged(string property)
    {
        StateHasChanged();
    }
}
